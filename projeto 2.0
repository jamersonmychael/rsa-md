#include <stdio.h>
#include <math.h>
#include <string.h>
long long int mdc( long long int e, long long int x)
{
	long long int aux;
	while(e%x != 0)
	{
		aux=e;
		e=x;
		x=aux%e;
	}
	return x;
}
long long int teoremadoresto(long long int m, long long int n, long long int e)
{
	long long int cont,res=1;
	for(cont=1; cont<=e; cont++)
	{
		res= (res *m %n)%n;
	}
	return res;
}
long long primo(long long int p,long long int *pont)
{
	int i,x=1;
	long long int raiz; 
	raiz = sqrt(p);
	if(p==1)
	{
	    x= 0;
	}
    if(p==0)
    {
      x= 0;
    }
	for(i=2 ;i <= raiz; i++)
	{
		if(p%i==0)
		{
		x= 0;
		}
	}
	if(x==0)
	{
		printf("O numero: %lld, nao e primo redigite-o:", p);
		scanf("%lld", pont);
		p= *pont;
		primo(p, pont);
	}
}
long long int inversoMod(long long int a, long long int b)
{
    long long int quociente[100000], valor[100000], i = 0, x = 0, k, resto, d = 0, phi;
    phi = a;

    while(b != 0)
    {
        quociente[i] = a/b;
        i++;
        resto = a % b;
        a = b;
        b = resto;
    }
    valor[0] = 1;
    for (k = i - 2; k >= 0; k--)
    {
        if(x == 0)
        {
            valor[x + 1] = quociente[k] * valor[x];
            x++;
        }
        else
        {
            valor[x + 1] = (quociente[k] * valor[x]) + valor[x -1];
            x++;
        }
    }
    if (x % 2 == 0)
    {
        d = valor[x];
        return d;
    }
    else
    {
        d = -valor[x];
        while(1)
        {
            d = d + phi;
            if (d >= 0)
            {
                 break;
            }
        }
        return d;
    }
}
long long igual(long long int*pont,long long int*pont1)
{
	printf("Os numeros nao podem ser iguais redigite-os:");
	scanf("%lld%lld", pont, pont1);
	primo(*pont,pont);
	primo(*pont1,pont1);
	if(*pont==*pont1)
	{
		igual(pont,pont1);
	}
}
long long verificar(long long int e, long long int p, long long int q,long long int *pont)
{
	long long int x;
	p=p-1;
	q=q-1;
	x=p*q;
	if(mdc(e,x) != 1)
	{
		printf("O  numero %lld, nao e relativamente primo a (p - 1)(q -1), redigite-o:", e);
		scanf("%lld", pont);
		e=*pont;
		verificar(e,p,q,pont);
	}

}
void converte(char frase[],long long int *pont)
{
	int cont,i;
	cont=strlen(frase);
	for(i=0; i<cont-1; i++)
	{
		if(frase[i]==' ')
		{
			*(pont+i)=frase[i]-4;
		}
		else
		{
			*(pont+i)=frase[i]-63;
		}
	}

}
long long criptografar(long long int *pont, long long int n, long long int e, int cont1)
{
	int cont;
	for(cont=0; cont<cont1-1; cont++)
	{
		*(pont+cont)=teoremadoresto(*(pont+cont),n,e);
	}
}
long long descriptografar(long long int p,long long int q, long long int e, long long int frasen[], char *frase, int cont)
{
	long long int x,d,cont1,n;
	x=(p-1)*(q-1);
	n=p*q;
	d=inversoMod(e,x);
	printf("%lld %lld %lld\n",e , d ,x);
	for(cont1=0; cont1 < cont;cont1++)
	{
		*(frase+cont1)=teoremadoresto(frasen[cont1],n,d);
		printf("aqui %c\n", *(frase+cont1));
	}
}
long long criararquivo(long long int chave, long long int e)
{
	FILE *chav;
	chav= fopen("chave.txt", "w");
	fprintf(chav,"A chave publica e :%lld %lld",chave, e );
	fclose(chav);
}
int main()
{
	int cont,cont1,funcao;
	int *pont;
	long long int p, q, e, n, frasen[10000]; char frase [10000];
	printf("Este programa tem 3 opçoes, selecione o que deseja fazer:\n1 - gerar chave pública\n2 - criptografar\n3 - descriptografar\n");
	printf("Digite o numero da funcao que deseja ultiliza: ");
	scanf("%d", &funcao);
	getchar();
	if(funcao==1)
	{
		printf("Digite os numeros primos p e q:");
		scanf("%lld%lld", &p,&q);
		if(p==q)
		{
			igual(&p,&q);
		}
		primo(p,&p);
		primo(q,&q);
		printf("Agora digite o expoente que é relativamente primo a (p - 1)(q -1):");
		scanf("%lld", &e);
		verificar(e,p,q,&e);
		printf("A chave publica da criptografia RSA e: %lld %lld\n", p*q, e);
		criararquivo(p*q,e);
	}
	if (funcao == 2)
	{
		printf("Digite o texto a ser criptografado: ");
		fgets(frase, 4000, stdin);
		printf("Digite a chave publica para criptografar:");
		scanf("%lld%lld", &n, &e);
		converte(frase, frasen);
		cont1=strlen(frase);
		criptografar(frasen,n,e,cont1);
		for(cont=0; cont<cont1-1; cont++)
		{
			printf("%lld ", frasen[cont]);
		}
		printf("\n");
	}
	if(funcao==3)
	{
		printf("Digite os numeros primos p e q:");
		scanf("%lld%lld", &p,&q);
		if(p==q)
		{
			igual(&p,&q);
		}
		primo(p,&p);
		primo(q,&q);
		printf("Agora digite o expoente que é relativamente primo a (p - 1)(q -1):");
		scanf("%lld", &e);
		verificar(e,p,q,&e);
		printf("Digite a mensagem incripitada:");
		printf("Ao final da frase digite -1\n");
		for(cont=0; ; cont++)
		{
			scanf("%lld", &frasen[cont]);
			if(frasen[cont]==-1)
			{
				break;
			}
		}
		descriptografar(p,q,e,frasen,frase,(cont));
		printf("%s", frase);
	}
	return 0;
}
